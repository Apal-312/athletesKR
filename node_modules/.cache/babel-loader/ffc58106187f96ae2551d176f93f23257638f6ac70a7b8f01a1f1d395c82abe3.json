{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/athletesKR/src/components/context/AuthContextProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport fire from \"../../fire\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создаем контекст авторизации\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authContext = /*#__PURE__*/createContext();\n\n// Кастомный хук для использования контекста авторизации\nexport const useAuth = () => {\n  _s();\n  return useContext(authContext);\n};\n\n// Компонент провайдера контекста авторизации\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst AuthContextProvider = ({\n  children\n}) => {\n  _s2();\n  // Состояния для управления формой и пользователем\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const navigate = useNavigate(); // Хук для навигации\n\n  // Функция для регистрации пользователя\n  const handleRegister = async () => {\n    try {\n      const userCredential = await fire.auth().createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n\n      // Устанавливаем роль пользователя в Firestore\n      await fire.firestore().collection(\"users\").doc(user.uid).set({\n        role: \"user\" // По умолчанию назначаем роль 'user'\n      });\n      setEmail(\"\"); // Сбрасываем значение email\n      setPassword(\"\"); // Сбрасываем значение password\n      navigate(\"/\"); // Перенаправляем пользователя после успешной регистрации\n    } catch (error) {\n      // Обработка ошибок регистрации\n      switch (error.code) {\n        case \"auth/email-already-in-use\":\n        case \"auth/invalid-email\":\n          setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n          break;\n        case \"auth/weak-password\":\n          setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  // Функция для входа пользователя\n  const handleLogin = async () => {\n    try {\n      const userCredential = await fire.auth().signInWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n\n      // Получаем роль пользователя из Firestore\n      const userDoc = await fire.firestore().collection(\"users\").doc(user.uid).get();\n      const userRole = userDoc.data().role;\n\n      // В зависимости от роли перенаправляем на соответствующую страницу\n      if (userRole === \"admin\") {\n        navigate(\"/admin\"); // Перенаправление на страницу админа\n      } else {\n        navigate(\"/\"); // Перенаправление на домашнюю страницу для обычных пользователей\n      }\n      setEmail(\"\"); // Сбрасываем значение email\n      setPassword(\"\"); // Сбрасываем значение password\n    } catch (error) {\n      // Обработка ошибок входа\n      switch (error.code) {\n        case \"auth/user-disabled\":\n        case \"auth/invalid-email\":\n        case \"auth/user-not-found\":\n          setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n          break;\n        case \"auth/wrong-password\":\n          setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  // Функция для выхода пользователя\n  const handleLogOut = async () => {\n    await fire.auth().signOut();\n    navigate(\"/\"); // Перенаправляем пользователя после выхода\n  };\n\n  // Функция для отслеживания состояния авторизации пользователя\n  const authListener = () => {\n    fire.auth().onAuthStateChanged(async user => {\n      if (user) {\n        // Получаем роль из Firestore\n        const userDoc = await fire.firestore().collection(\"users\").doc(user.uid).get();\n        const userRole = userDoc.data().role;\n        setUser({\n          ...user,\n          role: userRole // Сохраняем роль пользователя\n        });\n      } else {\n        setUser(null); // Если пользователь не авторизован, сбрасываем состояние\n      }\n      setLoading(false); // Устанавливаем флаг загрузки\n    });\n  };\n\n  // Используем хук useEffect для вызова authListener при монтировании компонента\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  // Возвращаем провайдер контекста с передаваемыми значениями и оборачиваем в него дочерние компоненты\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: {\n      email,\n      setEmail,\n      password,\n      setPassword,\n      user,\n      loading,\n      emailError,\n      passwordError,\n      handleRegister,\n      handleLogin,\n      handleLogOut\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthContextProvider, \"owza3ObJww5PfCAX08UPRdWkhGc=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthContextProvider;\nexport default AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","fire","useNavigate","jsxDEV","_jsxDEV","authContext","useAuth","_s","AuthContextProvider","children","_s2","email","setEmail","password","setPassword","user","setUser","loading","setLoading","emailError","setEmailError","passwordError","setPasswordError","navigate","handleRegister","userCredential","auth","createUserWithEmailAndPassword","firestore","collection","doc","uid","set","role","error","code","message","handleLogin","signInWithEmailAndPassword","userDoc","get","userRole","data","handleLogOut","signOut","authListener","onAuthStateChanged","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/athletesKR/src/components/context/AuthContextProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport fire from \"../../fire\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создаем контекст авторизации\nconst authContext = createContext();\n\n// Кастомный хук для использования контекста авторизации\nexport const useAuth = () => useContext(authContext);\n\n// Компонент провайдера контекста авторизации\nconst AuthContextProvider = ({ children }) => {\n  // Состояния для управления формой и пользователем\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const navigate = useNavigate(); // Хук для навигации\n\n  // Функция для регистрации пользователя\n  const handleRegister = async () => {\n    try {\n      const userCredential = await fire\n        .auth()\n        .createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n\n      // Устанавливаем роль пользователя в Firestore\n      await fire.firestore().collection(\"users\").doc(user.uid).set({\n        role: \"user\", // По умолчанию назначаем роль 'user'\n      });\n\n      setEmail(\"\"); // Сбрасываем значение email\n      setPassword(\"\"); // Сбрасываем значение password\n      navigate(\"/\"); // Перенаправляем пользователя после успешной регистрации\n    } catch (error) {\n      // Обработка ошибок регистрации\n      switch (error.code) {\n        case \"auth/email-already-in-use\":\n        case \"auth/invalid-email\":\n          setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n          break;\n        case \"auth/weak-password\":\n          setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  // Функция для входа пользователя\n  const handleLogin = async () => {\n    try {\n      const userCredential = await fire\n        .auth()\n        .signInWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n\n      // Получаем роль пользователя из Firestore\n      const userDoc = await fire\n        .firestore()\n        .collection(\"users\")\n        .doc(user.uid)\n        .get();\n      const userRole = userDoc.data().role;\n\n      // В зависимости от роли перенаправляем на соответствующую страницу\n      if (userRole === \"admin\") {\n        navigate(\"/admin\"); // Перенаправление на страницу админа\n      } else {\n        navigate(\"/\"); // Перенаправление на домашнюю страницу для обычных пользователей\n      }\n\n      setEmail(\"\"); // Сбрасываем значение email\n      setPassword(\"\"); // Сбрасываем значение password\n    } catch (error) {\n      // Обработка ошибок входа\n      switch (error.code) {\n        case \"auth/user-disabled\":\n        case \"auth/invalid-email\":\n        case \"auth/user-not-found\":\n          setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n          break;\n        case \"auth/wrong-password\":\n          setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  // Функция для выхода пользователя\n  const handleLogOut = async () => {\n    await fire.auth().signOut();\n    navigate(\"/\"); // Перенаправляем пользователя после выхода\n  };\n\n  // Функция для отслеживания состояния авторизации пользователя\n  const authListener = () => {\n    fire.auth().onAuthStateChanged(async (user) => {\n      if (user) {\n        // Получаем роль из Firestore\n        const userDoc = await fire\n          .firestore()\n          .collection(\"users\")\n          .doc(user.uid)\n          .get();\n        const userRole = userDoc.data().role;\n\n        setUser({\n          ...user,\n          role: userRole, // Сохраняем роль пользователя\n        });\n      } else {\n        setUser(null); // Если пользователь не авторизован, сбрасываем состояние\n      }\n      setLoading(false); // Устанавливаем флаг загрузки\n    });\n  };\n\n  // Используем хук useEffect для вызова authListener при монтировании компонента\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  // Возвращаем провайдер контекста с передаваемыми значениями и оборачиваем в него дочерние компоненты\n  return (\n    <authContext.Provider\n      value={{\n        email,\n        setEmail,\n        password,\n        setPassword,\n        user,\n        loading,\n        emailError,\n        passwordError,\n        handleRegister,\n        handleLogin,\n        handleLogOut,\n      }}\n    >\n      {children}\n    </authContext.Provider>\n  );\n};\n\nexport default AuthContextProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}