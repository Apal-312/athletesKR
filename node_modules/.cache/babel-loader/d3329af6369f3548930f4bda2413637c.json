{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/athletesKR/src/components/context/AuthContextProvider.js\";\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport fire from \"../../fire\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создаем контекст авторизации\nconst authContext = createContext();\n\n// Кастомный хук для использования контекста авторизации\nexport const useAuth = () => useContext(authContext);\n\n// Компонент провайдера контекста авторизации\nconst AuthContextProvider = ({\n  children\n}) => {\n  // Состояния для управления формой и пользователем\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [hasAccount, setHasAccount] = useState(false); // Состояние для определения, зарегистрирован ли пользователь\n  const navigate = useNavigate(); // Хук для навигации\n\n  // Функция для регистрации пользователя\n  const handleRegister = () => {\n    fire.auth().createUserWithEmailAndPassword(email, password).then(() => {\n      setHasAccount(true); // Устанавливаем флаг, что пользователь зарегистрирован\n      navigate(\"/\"); // Перенаправляем пользователя после успешной регистрации\n    }).catch(error => {\n      // Обработка ошибок регистрации\n      switch (error.code) {\n        case \"auth/email-already-in-use\":\n        case \"auth/invalid-email\":\n          setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n          break;\n        case \"auth/weak-password\":\n          setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n          break;\n        default:\n          break;\n      }\n    });\n  };\n\n  // Функция для входа пользователя\n  const handleLogin = () => {\n    fire.auth().signInWithEmailAndPassword(email, password).then(() => {\n      navigate(\"/\"); // Перенаправляем пользователя после успешного входа\n    }).catch(error => {\n      // Обработка ошибок входа\n      switch (error.code) {\n        case \"auth/user-disabled\":\n        case \"auth/invalid-email\":\n        case \"auth/user-not-found\":\n          setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n          break;\n        case \"auth/wrong-password\":\n          setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n          break;\n        default:\n          break;\n      }\n    });\n  };\n\n  // Функция для выхода пользователя\n  const handleLogOut = () => {\n    fire.auth().signOut();\n    navigate(\"/\"); // Перенаправляем пользователя после выхода\n  };\n\n  // Функция для отслеживания состояния авторизации пользователя\n  const authListener = () => {\n    fire.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user); // Устанавливаем пользователя в состояние, если он авторизован\n      } else {\n        setUser(null); // Сбрасываем состояние пользователя, если он не авторизован\n      }\n      setLoading(false); // Устанавливаем флаг, что загрузка завершена\n    });\n  };\n\n  // Используем хук useEffect для вызова authListener при монтировании компонента\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  // Возвращаем провайдер контекста с передаваемыми значениями и оборачиваем в него дочерние компоненты\n  return /*#__PURE__*/React.createElement(authContext.Provider, {\n    value: {\n      email,\n      setEmail,\n      password,\n      setPassword,\n      user,\n      loading,\n      emailError,\n      passwordError,\n      handleRegister,\n      handleLogin,\n      handleLogOut,\n      hasAccount,\n      setHasAccount\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport default AuthContextProvider;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","fire","useNavigate","authContext","useAuth","AuthContextProvider","children","email","setEmail","password","setPassword","user","setUser","loading","setLoading","emailError","setEmailError","passwordError","setPasswordError","hasAccount","setHasAccount","navigate","handleRegister","auth","createUserWithEmailAndPassword","then","catch","error","code","message","handleLogin","signInWithEmailAndPassword","handleLogOut","signOut","authListener","onAuthStateChanged","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/macbook/Desktop/athletesKR/src/components/context/AuthContextProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport fire from \"../../fire\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создаем контекст авторизации\nconst authContext = createContext();\n\n// Кастомный хук для использования контекста авторизации\nexport const useAuth = () => useContext(authContext);\n\n// Компонент провайдера контекста авторизации\nconst AuthContextProvider = ({ children }) => {\n  // Состояния для управления формой и пользователем\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [hasAccount, setHasAccount] = useState(false); // Состояние для определения, зарегистрирован ли пользователь\n  const navigate = useNavigate(); // Хук для навигации\n\n  // Функция для регистрации пользователя\n  const handleRegister = () => {\n    fire\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(() => {\n        setHasAccount(true); // Устанавливаем флаг, что пользователь зарегистрирован\n        navigate(\"/\"); // Перенаправляем пользователя после успешной регистрации\n      })\n      .catch((error) => {\n        // Обработка ошибок регистрации\n        switch (error.code) {\n          case \"auth/email-already-in-use\":\n          case \"auth/invalid-email\":\n            setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n            break;\n          case \"auth/weak-password\":\n            setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n            break;\n          default:\n            break;\n        }\n      });\n  };\n\n  // Функция для входа пользователя\n  const handleLogin = () => {\n    fire\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(() => {\n        navigate(\"/\"); // Перенаправляем пользователя после успешного входа\n      })\n      .catch((error) => {\n        // Обработка ошибок входа\n        switch (error.code) {\n          case \"auth/user-disabled\":\n          case \"auth/invalid-email\":\n          case \"auth/user-not-found\":\n            setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n            break;\n          case \"auth/wrong-password\":\n            setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n            break;\n          default:\n            break;\n        }\n      });\n  };\n\n  // Функция для выхода пользователя\n  const handleLogOut = () => {\n    fire.auth().signOut();\n    navigate(\"/\"); // Перенаправляем пользователя после выхода\n  };\n\n  // Функция для отслеживания состояния авторизации пользователя\n  const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user); // Устанавливаем пользователя в состояние, если он авторизован\n      } else {\n        setUser(null); // Сбрасываем состояние пользователя, если он не авторизован\n      }\n      setLoading(false); // Устанавливаем флаг, что загрузка завершена\n    });\n  };\n\n  // Используем хук useEffect для вызова authListener при монтировании компонента\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  // Возвращаем провайдер контекста с передаваемыми значениями и оборачиваем в него дочерние компоненты\n  return (\n    <authContext.Provider\n      value={{\n        email,\n        setEmail,\n        password,\n        setPassword,\n        user,\n        loading,\n        emailError,\n        passwordError,\n        handleRegister,\n        handleLogin,\n        handleLogOut,\n        hasAccount,\n        setHasAccount,\n      }}\n    >\n      {children}\n    </authContext.Provider>\n  );\n};\n\nexport default AuthContextProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}