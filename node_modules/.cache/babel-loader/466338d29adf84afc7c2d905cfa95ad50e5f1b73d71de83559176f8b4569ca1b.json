{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from\"react\";import fire from\"../../fire\";import{useNavigate}from\"react-router-dom\";// Создаем контекст авторизации\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";const authContext=/*#__PURE__*/createContext();// Кастомный хук для использования контекста авторизации\nexport const useAuth=()=>useContext(authContext);// Компонент провайдера контекста авторизации\nconst AuthContextProvider=_ref=>{let{children}=_ref;// Состояния для email, password, пользователя, загрузки и ошибок\nconst[email,setEmail]=useState(\"\");// Состояние для хранения email\nconst[password,setPassword]=useState(\"\");// Состояние для хранения пароля\nconst[user,setUser]=useState(null);// Состояние для хранения текущего пользователя\nconst[loading,setLoading]=useState(true);// Состояние для отслеживания загрузки\nconst[emailError,setEmailError]=useState(\"\");// Состояние для хранения ошибки email\nconst[passwordError,setPasswordError]=useState(\"\");// Состояние для хранения ошибки пароля\nconst navigate=useNavigate();// Используем useNavigate для перенаправления\n// Функция для регистрации пользователя\nconst handleRegister=async()=>{try{// Попытка регистрации пользователя с email и password\nawait fire.auth().createUserWithEmailAndPassword(email,password);setEmail(\"\");// Сбрасываем значение email\nsetPassword(\"\");// Сбрасываем значение password\nnavigate(\"/\");// Перенаправляем пользователя после успешной регистрации\n}catch(error){switch(error.code){case\"auth/email-already-in-use\":// Если email уже используется\ncase\"auth/invalid-email\":// Если email невалиден\nsetEmailError(error.message);// Устанавливаем ошибку для email\nbreak;case\"auth/weak-password\":// Если пароль слишком слабый\nsetPasswordError(error.message);// Устанавливаем ошибку для пароля\nbreak;default:break;}}};// Функция для входа пользователя\nconst handleLogin=async()=>{try{await fire.auth().signInWithEmailAndPassword(email,password);setEmail(\"\");// Сбрасываем значение email\nsetPassword(\"\");// Сбрасываем значение password\nnavigate(\"/\");// Перенаправляем пользователя после успешного входа\n}catch(error){// Обработка ошибок входа\nswitch(error.code){case\"auth/user-disabled\":// Если аккаунт заблокирован\ncase\"auth/invalid-email\":// Если email невалиден\ncase\"auth/user-not-found\":// Если пользователь не найден\nsetEmailError(error.message);// Устанавливаем ошибку для email\nbreak;case\"auth/wrong-password\":// Если неправильный пароль\nsetPasswordError(error.message);// Устанавливаем ошибку для пароля\nbreak;default:break;}}};// Функция для выхода пользователя\nconst handleLogOut=async()=>{try{// Попытка выхода из системы\nawait fire.auth().signOut();navigate(\"/\");// Перенаправляем пользователя после выхода\n}catch(error){console.error(\"Error logging out: \",error.message);// Логируем ошибку при выходе\n}};// Функция для отслеживания состояния авторизации пользователя\nconst authListener=()=>{fire.auth().onAuthStateChanged(user=>{if(user){setUser(user);// Если пользователь авторизован, устанавливаем его в состояние\n}else{setUser(null);// Если пользователь не авторизован, очищаем состояние\n}setLoading(false);// Останавливаем загрузку после получения состояния авторизации\n});};// Используем useEffect для запуска отслеживания состояния авторизации\nuseEffect(()=>{authListener();},[]);return/*#__PURE__*/_jsxs(authContext.Provider,{value:{email,setEmail,password,setPassword,user,loading,emailError,passwordError,handleRegister,handleLogin,handleLogOut// Передаем handleLogOut в контекст\n},children:[children,\" \"]});};export default AuthContextProvider;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","fire","useNavigate","jsxs","_jsxs","authContext","useAuth","AuthContextProvider","_ref","children","email","setEmail","password","setPassword","user","setUser","loading","setLoading","emailError","setEmailError","passwordError","setPasswordError","navigate","handleRegister","auth","createUserWithEmailAndPassword","error","code","message","handleLogin","signInWithEmailAndPassword","handleLogOut","signOut","console","authListener","onAuthStateChanged","Provider","value"],"sources":["/Users/macbook/Desktop/athletesKR2/src/components/context/AuthContextProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport fire from \"../../fire\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создаем контекст авторизации\nconst authContext = createContext();\n\n// Кастомный хук для использования контекста авторизации\nexport const useAuth = () => useContext(authContext);\n\n// Компонент провайдера контекста авторизации\nconst AuthContextProvider = ({ children }) => {\n  // Состояния для email, password, пользователя, загрузки и ошибок\n  const [email, setEmail] = useState(\"\"); // Состояние для хранения email\n  const [password, setPassword] = useState(\"\"); // Состояние для хранения пароля\n  const [user, setUser] = useState(null); // Состояние для хранения текущего пользователя\n  const [loading, setLoading] = useState(true); // Состояние для отслеживания загрузки\n  const [emailError, setEmailError] = useState(\"\"); // Состояние для хранения ошибки email\n  const [passwordError, setPasswordError] = useState(\"\"); // Состояние для хранения ошибки пароля\n  const navigate = useNavigate(); // Используем useNavigate для перенаправления\n\n  // Функция для регистрации пользователя\n  const handleRegister = async () => {\n    try {\n      // Попытка регистрации пользователя с email и password\n      await fire.auth().createUserWithEmailAndPassword(email, password);\n      setEmail(\"\"); // Сбрасываем значение email\n      setPassword(\"\"); // Сбрасываем значение password\n      navigate(\"/\"); // Перенаправляем пользователя после успешной регистрации\n    } catch (error) {\n      switch (error.code) {\n        case \"auth/email-already-in-use\": // Если email уже используется\n        case \"auth/invalid-email\": // Если email невалиден\n          setEmailError(error.message); // Устанавливаем ошибку для email\n          break;\n        case \"auth/weak-password\": // Если пароль слишком слабый\n          setPasswordError(error.message); // Устанавливаем ошибку для пароля\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  // Функция для входа пользователя\n  const handleLogin = async () => {\n    try {\n      await fire.auth().signInWithEmailAndPassword(email, password);\n      setEmail(\"\"); // Сбрасываем значение email\n      setPassword(\"\"); // Сбрасываем значение password\n      navigate(\"/\"); // Перенаправляем пользователя после успешного входа\n    } catch (error) {\n      // Обработка ошибок входа\n      switch (error.code) {\n        case \"auth/user-disabled\": // Если аккаунт заблокирован\n        case \"auth/invalid-email\": // Если email невалиден\n        case \"auth/user-not-found\": // Если пользователь не найден\n          setEmailError(error.message); // Устанавливаем ошибку для email\n          break;\n        case \"auth/wrong-password\": // Если неправильный пароль\n          setPasswordError(error.message); // Устанавливаем ошибку для пароля\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  // Функция для выхода пользователя\n  const handleLogOut = async () => {\n    try {\n      // Попытка выхода из системы\n      await fire.auth().signOut();\n      navigate(\"/\"); // Перенаправляем пользователя после выхода\n    } catch (error) {\n      console.error(\"Error logging out: \", error.message); // Логируем ошибку при выходе\n    }\n  };\n\n  // Функция для отслеживания состояния авторизации пользователя\n  const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user); // Если пользователь авторизован, устанавливаем его в состояние\n      } else {\n        setUser(null); // Если пользователь не авторизован, очищаем состояние\n      }\n      setLoading(false); // Останавливаем загрузку после получения состояния авторизации\n    });\n  };\n\n  // Используем useEffect для запуска отслеживания состояния авторизации\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  return (\n    <authContext.Provider\n      value={{\n        email,\n        setEmail,\n        password,\n        setPassword,\n        user,\n        loading,\n        emailError,\n        passwordError,\n        handleRegister,\n        handleLogin,\n        handleLogOut, // Передаем handleLogOut в контекст\n      }}\n    >\n      {children} {/* Отображаем дочерние компоненты */}\n    </authContext.Provider>\n  );\n};\n\nexport default AuthContextProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}