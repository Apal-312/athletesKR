{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/athletesKR/src/components/context/AuthContextProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport fire from \"../../fire\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(authContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst AuthContextProvider = ({\n  children\n}) => {\n  _s2();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [hasAccount, setHasAccount] = useState(true); // По умолчанию пользователь может войти\n  const navigate = useNavigate();\n  const clearInputs = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n  const clearErrors = () => {\n    setEmailError(\"\");\n    setPasswordError(\"\");\n  };\n  const handleLogin = async () => {\n    try {\n      const userCredential = await fire.auth().signInWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n      if (user.email === \"admin@example.com\") {\n        navigate(\"/admin\"); // Редирект на админскую страницу\n      } else {\n        navigate(\"/\"); // Редирект на главную страницу\n      }\n      clearInputs(); // Очистить поля после входа\n    } catch (error) {\n      switch (error.code) {\n        case \"auth/user-not-found\":\n        case \"auth/invalid-email\":\n          setEmailError(\"Пользователь не найден\");\n          break;\n        case \"auth/wrong-password\":\n          setPasswordError(\"Неверный пароль\");\n          break;\n        default:\n          setEmailError(\"Ошибка при входе\");\n      }\n    }\n  };\n  const handleRegister = async () => {\n    try {\n      await fire.auth().createUserWithEmailAndPassword(email, password);\n      clearInputs();\n      setHasAccount(true); // Установить состояние для формы входа\n    } catch (error) {\n      switch (error.code) {\n        case \"auth/email-already-in-use\":\n          setEmailError(\"Электронная почта уже используется\");\n          break;\n        case \"auth/weak-password\":\n          setPasswordError(\"Пароль слишком слабый\");\n          break;\n        default:\n          setEmailError(\"Ошибка при регистрации\");\n      }\n    }\n  };\n  const authListener = () => {\n    fire.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(null);\n      }\n    });\n  };\n  useEffect(() => {\n    authListener();\n  }, []);\n  const values = {\n    email,\n    password,\n    emailError,\n    passwordError,\n    user,\n    setEmail,\n    setPassword,\n    setEmailError,\n    setPasswordError,\n    handleLogin,\n    handleRegister,\n    setHasAccount,\n    hasAccount\n  };\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthContextProvider, \"WdjU9tkiy/2aUlOqQIkWBBxEZLM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthContextProvider;\nexport default AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","fire","useNavigate","jsxDEV","_jsxDEV","authContext","useAuth","_s","AuthContextProvider","children","_s2","email","setEmail","password","setPassword","user","setUser","emailError","setEmailError","passwordError","setPasswordError","hasAccount","setHasAccount","navigate","clearInputs","clearErrors","handleLogin","userCredential","auth","signInWithEmailAndPassword","error","code","handleRegister","createUserWithEmailAndPassword","authListener","onAuthStateChanged","values","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/athletesKR/src/components/context/AuthContextProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport fire from \"../../fire\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst authContext = createContext();\nexport const useAuth = () => useContext(authContext);\n\nconst AuthContextProvider = ({ children }) => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [hasAccount, setHasAccount] = useState(true); // По умолчанию пользователь может войти\n  const navigate = useNavigate();\n\n  const clearInputs = () => {\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n\n  const clearErrors = () => {\n    setEmailError(\"\");\n    setPasswordError(\"\");\n  };\n\n  const handleLogin = async () => {\n    try {\n      const userCredential = await fire\n        .auth()\n        .signInWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n      if (user.email === \"admin@example.com\") {\n        navigate(\"/admin\"); // Редирект на админскую страницу\n      } else {\n        navigate(\"/\"); // Редирект на главную страницу\n      }\n      clearInputs(); // Очистить поля после входа\n    } catch (error) {\n      switch (error.code) {\n        case \"auth/user-not-found\":\n        case \"auth/invalid-email\":\n          setEmailError(\"Пользователь не найден\");\n          break;\n        case \"auth/wrong-password\":\n          setPasswordError(\"Неверный пароль\");\n          break;\n        default:\n          setEmailError(\"Ошибка при входе\");\n      }\n    }\n  };\n\n  const handleRegister = async () => {\n    try {\n      await fire.auth().createUserWithEmailAndPassword(email, password);\n      clearInputs();\n      setHasAccount(true); // Установить состояние для формы входа\n    } catch (error) {\n      switch (error.code) {\n        case \"auth/email-already-in-use\":\n          setEmailError(\"Электронная почта уже используется\");\n          break;\n        case \"auth/weak-password\":\n          setPasswordError(\"Пароль слишком слабый\");\n          break;\n        default:\n          setEmailError(\"Ошибка при регистрации\");\n      }\n    }\n  };\n\n  const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(null);\n      }\n    });\n  };\n\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  const values = {\n    email,\n    password,\n    emailError,\n    passwordError,\n    user,\n    setEmail,\n    setPassword,\n    setEmailError,\n    setPasswordError,\n    handleLogin,\n    handleRegister,\n    setHasAccount,\n    hasAccount,\n  };\n\n  return <authContext.Provider value={values}>{children}</authContext.Provider>;\n};\n\nexport default AuthContextProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}