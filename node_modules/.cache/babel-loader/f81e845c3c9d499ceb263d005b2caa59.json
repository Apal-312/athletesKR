{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/athletesKR/src/components/context/ProductContextProvider.js\";\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport axios from \"axios\";\nimport { API_PRODUCTS, API_CATEGORIES } from \"../../helpers/const\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создание контекста для продуктов\nexport const ProductContext = createContext();\nexport const useProduct = () => useContext(ProductContext);\n\n// Начальное состояние для редюсера\nconst INIT_STATE = {\n  athletes: [],\n  oneAthlete: {},\n  sports: [],\n  categories: [] // Добавлено состояние для категорий\n};\n\n// Редюсер для управления состоянием\nconst productReducer = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case \"GET_ATHLETES\":\n      return {\n        ...state,\n        athletes: action.payload\n      };\n    case \"GET_ONE_ATHLETE\":\n      return {\n        ...state,\n        oneAthlete: action.payload\n      };\n    case \"GET_SPORTS\":\n      return {\n        ...state,\n        sports: action.payload\n      };\n    case \"GET_CATEGORIES\":\n      // Добавлен case для категорий\n      return {\n        ...state,\n        categories: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst ProductContextProvider = ({\n  children\n}) => {\n  const navigate = useNavigate();\n  const [state, dispatch] = useReducer(productReducer, INIT_STATE);\n\n  // Создание нового спортсмена\n  const createAthlete = async newAthlete => {\n    await axios.post(API_PRODUCTS, newAthlete);\n    getAthletes(); // Обновление списка спортсменов после добавления\n    navigate(\"/athletes\");\n  };\n\n  // Получение всех спортсменов\n  const getAthletes = (params = {}) => {\n    const searchParams = new URLSearchParams(params); // Добавлено для поддержки параметров\n    axios.get(`${API_PRODUCTS}?${searchParams}`) // Добавлено для поддержки параметров\n    .then(response => {\n      dispatch({\n        type: \"GET_ATHLETES\",\n        payload: response.data\n      });\n    }).catch(error => {\n      console.error(\"Error fetching athletes:\", error);\n    });\n  };\n\n  // Удаление спортсмена\n  const deleteAthlete = async id => {\n    await axios.delete(`${API_PRODUCTS}/${id}`);\n    getAthletes(); // Обновление списка после удаления\n  };\n\n  // Получение одного спортсмена\n  const getOneAthlete = async id => {\n    try {\n      const {\n        data\n      } = await axios.get(`${API_PRODUCTS}/${id}`);\n      dispatch({\n        type: \"GET_ONE_ATHLETE\",\n        payload: data\n      });\n    } catch (error) {\n      console.error(\"Error fetching athlete details:\", error);\n    }\n  };\n\n  // Редактирование данных спортсмена\n  const editAthlete = async (id, editedAthlete) => {\n    await axios.patch(`${API_PRODUCTS}/${id}`, editedAthlete);\n    getAthletes(); // Обновление списка спортсменов после редактирования\n    navigate(\"/athletes\");\n  };\n\n  // Создание новой категории (вида спорта)\n  const createSport = async newSport => {\n    await axios.post(API_CATEGORIES, newSport);\n    getSports(); // Обновление списка видов спорта после добавления\n    navigate(\"/athletes\");\n  };\n\n  // Получение всех категорий (видов спорта)\n  const getSports = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(API_CATEGORIES);\n      dispatch({\n        type: \"GET_SPORTS\",\n        payload: data\n      });\n      dispatch({\n        type: \"GET_CATEGORIES\",\n        payload: data\n      }); // Использование одной и той же функции для категорий\n    } catch (error) {\n      console.error(\"Error fetching sports:\", error);\n    }\n  };\n\n  // Фильтрация по параметрам\n  const fetchByParams = (query, value) => {\n    const search = new URLSearchParams(window.location.search);\n    if (value === \"all\") {\n      search.delete(query);\n    } else {\n      search.set(query, value);\n    }\n    const url = `${window.location.pathname}?${search}`;\n    navigate(url);\n    getAthletes(Object.fromEntries(search.entries())); // Обновление списка с учетом новых параметров\n  };\n\n  // Получение данных одного спортсмена\n  const fetchOneProduct = async id => {\n    try {\n      const {\n        data\n      } = await axios.get(`${API_PRODUCTS}/${id}`);\n      dispatch({\n        type: \"GET_ONE_ATHLETE\",\n        payload: data\n      });\n    } catch (error) {\n      console.error(\"Error fetching product details:\", error);\n    }\n  };\n\n  // Объект значений, передаваемых через контекст\n  const values = {\n    createAthlete,\n    getAthletes,\n    athletes: state.athletes,\n    deleteAthlete,\n    getOneAthlete,\n    oneAthlete: state.oneAthlete,\n    editAthlete,\n    createSport,\n    getSports,\n    sports: state.sports,\n    categories: state.categories,\n    // Использование состояния категорий\n    fetchByParams,\n    fetchOneProduct\n  };\n  return /*#__PURE__*/React.createElement(ProductContext.Provider, {\n    value: values,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport default ProductContextProvider;","map":{"version":3,"names":["React","createContext","useContext","useReducer","axios","API_PRODUCTS","API_CATEGORIES","useNavigate","ProductContext","useProduct","INIT_STATE","athletes","oneAthlete","sports","categories","productReducer","state","action","type","payload","ProductContextProvider","children","navigate","dispatch","createAthlete","newAthlete","post","getAthletes","params","searchParams","URLSearchParams","get","then","response","data","catch","error","console","deleteAthlete","id","delete","getOneAthlete","editAthlete","editedAthlete","patch","createSport","newSport","getSports","fetchByParams","query","value","search","window","location","set","url","pathname","Object","fromEntries","entries","fetchOneProduct","values","createElement","Provider","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/macbook/Desktop/athletesKR/src/components/context/ProductContextProvider.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\nimport axios from \"axios\";\nimport { API_PRODUCTS, API_CATEGORIES } from \"../../helpers/const\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создание контекста для продуктов\nexport const ProductContext = createContext();\nexport const useProduct = () => useContext(ProductContext);\n\n// Начальное состояние для редюсера\nconst INIT_STATE = {\n  athletes: [],\n  oneAthlete: {},\n  sports: [],\n  categories: [], // Добавлено состояние для категорий\n};\n\n// Редюсер для управления состоянием\nconst productReducer = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case \"GET_ATHLETES\":\n      return { ...state, athletes: action.payload };\n    case \"GET_ONE_ATHLETE\":\n      return { ...state, oneAthlete: action.payload };\n    case \"GET_SPORTS\":\n      return { ...state, sports: action.payload };\n    case \"GET_CATEGORIES\": // Добавлен case для категорий\n      return { ...state, categories: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst ProductContextProvider = ({ children }) => {\n  const navigate = useNavigate();\n  const [state, dispatch] = useReducer(productReducer, INIT_STATE);\n\n  // Создание нового спортсмена\n  const createAthlete = async (newAthlete) => {\n    await axios.post(API_PRODUCTS, newAthlete);\n    getAthletes(); // Обновление списка спортсменов после добавления\n    navigate(\"/athletes\");\n  };\n\n  // Получение всех спортсменов\n  const getAthletes = (params = {}) => {\n    const searchParams = new URLSearchParams(params); // Добавлено для поддержки параметров\n    axios\n      .get(`${API_PRODUCTS}?${searchParams}`) // Добавлено для поддержки параметров\n      .then((response) => {\n        dispatch({ type: \"GET_ATHLETES\", payload: response.data });\n      })\n      .catch((error) => {\n        console.error(\"Error fetching athletes:\", error);\n      });\n  };\n\n  // Удаление спортсмена\n  const deleteAthlete = async (id) => {\n    await axios.delete(`${API_PRODUCTS}/${id}`);\n    getAthletes(); // Обновление списка после удаления\n  };\n\n  // Получение одного спортсмена\n  const getOneAthlete = async (id) => {\n    try {\n      const { data } = await axios.get(`${API_PRODUCTS}/${id}`);\n      dispatch({ type: \"GET_ONE_ATHLETE\", payload: data });\n    } catch (error) {\n      console.error(\"Error fetching athlete details:\", error);\n    }\n  };\n\n  // Редактирование данных спортсмена\n  const editAthlete = async (id, editedAthlete) => {\n    await axios.patch(`${API_PRODUCTS}/${id}`, editedAthlete);\n    getAthletes(); // Обновление списка спортсменов после редактирования\n    navigate(\"/athletes\");\n  };\n\n  // Создание новой категории (вида спорта)\n  const createSport = async (newSport) => {\n    await axios.post(API_CATEGORIES, newSport);\n    getSports(); // Обновление списка видов спорта после добавления\n    navigate(\"/athletes\");\n  };\n\n  // Получение всех категорий (видов спорта)\n  const getSports = async () => {\n    try {\n      const { data } = await axios.get(API_CATEGORIES);\n      dispatch({ type: \"GET_SPORTS\", payload: data });\n      dispatch({ type: \"GET_CATEGORIES\", payload: data }); // Использование одной и той же функции для категорий\n    } catch (error) {\n      console.error(\"Error fetching sports:\", error);\n    }\n  };\n\n  // Фильтрация по параметрам\n  const fetchByParams = (query, value) => {\n    const search = new URLSearchParams(window.location.search);\n    if (value === \"all\") {\n      search.delete(query);\n    } else {\n      search.set(query, value);\n    }\n    const url = `${window.location.pathname}?${search}`;\n    navigate(url);\n    getAthletes(Object.fromEntries(search.entries())); // Обновление списка с учетом новых параметров\n  };\n\n  // Получение данных одного спортсмена\n  const fetchOneProduct = async (id) => {\n    try {\n      const { data } = await axios.get(`${API_PRODUCTS}/${id}`);\n      dispatch({ type: \"GET_ONE_ATHLETE\", payload: data });\n    } catch (error) {\n      console.error(\"Error fetching product details:\", error);\n    }\n  };\n\n  // Объект значений, передаваемых через контекст\n  const values = {\n    createAthlete,\n    getAthletes,\n    athletes: state.athletes,\n    deleteAthlete,\n    getOneAthlete,\n    oneAthlete: state.oneAthlete,\n    editAthlete,\n    createSport,\n    getSports,\n    sports: state.sports,\n    categories: state.categories, // Использование состояния категорий\n    fetchByParams,\n    fetchOneProduct,\n  };\n\n  return (\n    <ProductContext.Provider value={values}>{children}</ProductContext.Provider>\n  );\n};\n\nexport default ProductContextProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}