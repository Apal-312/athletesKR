{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/athletesKR/src/components/context/AuthContextProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport fire from \"../../fire\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создаем контекст авторизации\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst authContext = /*#__PURE__*/createContext();\n\n// Кастомный хук для использования контекста авторизации\nexport const useAuth = () => {\n  _s();\n  return useContext(authContext);\n};\n\n// Компонент провайдера контекста авторизации\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst AuthContextProvider = ({\n  children\n}) => {\n  _s2();\n  // Состояния для управления формой и пользователем\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [hasAccount, setHasAccount] = useState(false); // Состояние для определения, зарегистрирован ли пользователь\n  const [userRole, setUserRole] = useState(\"\"); // Состояние для роли пользователя\n  const navigate = useNavigate(); // Хук для навигации\n\n  // Функция для регистрации пользователя\n  const handleRegister = () => {\n    fire.auth().createUserWithEmailAndPassword(email, password).then(userCredential => {\n      const user = userCredential.user;\n\n      // Создание пользователя в базе данных и установка роли\n      fire.firestore().collection(\"users\").doc(user.uid).set({\n        email: user.email,\n        role: \"user\" // По умолчанию устанавливаем роль как \"user\"\n      });\n      setHasAccount(true); // Устанавливаем флаг, что пользователь зарегистрирован\n      navigate(\"/\"); // Перенаправляем пользователя после успешной регистрации\n    }).catch(error => {\n      // Обработка ошибок регистрации\n      switch (error.code) {\n        case \"auth/email-already-in-use\":\n        case \"auth/invalid-email\":\n          setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n          break;\n        case \"auth/weak-password\":\n          setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n          break;\n        default:\n          break;\n      }\n    });\n  };\n\n  // Функция для входа пользователя\n  const handleLogin = () => {\n    fire.auth().signInWithEmailAndPassword(email, password).then(async userCredential => {\n      const user = userCredential.user;\n\n      // Получаем данные пользователя из Firestore\n      const userDoc = await fire.firestore().collection(\"users\").doc(user.uid).get();\n      const userRole = userDoc.data().role;\n      setUserRole(userRole); // Устанавливаем роль пользователя\n\n      // Перенаправляем в зависимости от роли пользователя\n      if (userRole === \"admin\") {\n        navigate(\"/admin\"); // Перенаправляем на админскую страницу\n      } else {\n        navigate(\"/\"); // Перенаправляем на главную страницу для обычных пользователей\n      }\n    }).catch(error => {\n      // Обработка ошибок входа\n      switch (error.code) {\n        case \"auth/user-disabled\":\n        case \"auth/invalid-email\":\n        case \"auth/user-not-found\":\n          setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n          break;\n        case \"auth/wrong-password\":\n          setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n          break;\n        default:\n          break;\n      }\n    });\n  };\n\n  // Функция для выхода пользователя\n  const handleLogOut = () => {\n    fire.auth().signOut();\n    navigate(\"/\"); // Перенаправляем пользователя после выхода\n  };\n\n  // Функция для отслеживания состояния авторизации пользователя\n  const authListener = () => {\n    fire.auth().onAuthStateChanged(user => {\n      if (user) {\n        setUser(user); // Устанавливаем пользователя в состояние, если он авторизован\n\n        // Получаем роль пользователя из Firestore\n        fire.firestore().collection(\"users\").doc(user.uid).get().then(doc => {\n          const userRole = doc.data().role;\n          setUserRole(userRole); // Устанавливаем роль\n        });\n      } else {\n        setUser(null); // Сбрасываем состояние пользователя, если он не авторизован\n        setUserRole(\"\"); // Сбрасываем роль\n      }\n      setLoading(false); // Устанавливаем флаг, что загрузка завершена\n    });\n  };\n\n  // Используем хук useEffect для вызова authListener при монтировании компонента\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  // Возвращаем провайдер контекста с передаваемыми значениями и оборачиваем в него дочерние компоненты\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: {\n      email,\n      setEmail,\n      password,\n      setPassword,\n      user,\n      loading,\n      emailError,\n      passwordError,\n      handleRegister,\n      handleLogin,\n      handleLogOut,\n      hasAccount,\n      setHasAccount,\n      userRole // Роль пользователя\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthContextProvider, \"aDzH2bVICi5eMNszdWYLEcysoMM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthContextProvider;\nexport default AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","fire","useNavigate","jsxDEV","_jsxDEV","authContext","useAuth","_s","AuthContextProvider","children","_s2","email","setEmail","password","setPassword","user","setUser","loading","setLoading","emailError","setEmailError","passwordError","setPasswordError","hasAccount","setHasAccount","userRole","setUserRole","navigate","handleRegister","auth","createUserWithEmailAndPassword","then","userCredential","firestore","collection","doc","uid","set","role","catch","error","code","message","handleLogin","signInWithEmailAndPassword","userDoc","get","data","handleLogOut","signOut","authListener","onAuthStateChanged","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macbook/Desktop/athletesKR/src/components/context/AuthContextProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport fire from \"../../fire\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создаем контекст авторизации\nconst authContext = createContext();\n\n// Кастомный хук для использования контекста авторизации\nexport const useAuth = () => useContext(authContext);\n\n// Компонент провайдера контекста авторизации\nconst AuthContextProvider = ({ children }) => {\n  // Состояния для управления формой и пользователем\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [emailError, setEmailError] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(\"\");\n  const [hasAccount, setHasAccount] = useState(false); // Состояние для определения, зарегистрирован ли пользователь\n  const [userRole, setUserRole] = useState(\"\"); // Состояние для роли пользователя\n  const navigate = useNavigate(); // Хук для навигации\n\n  // Функция для регистрации пользователя\n  const handleRegister = () => {\n    fire\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then((userCredential) => {\n        const user = userCredential.user;\n\n        // Создание пользователя в базе данных и установка роли\n        fire.firestore().collection(\"users\").doc(user.uid).set({\n          email: user.email,\n          role: \"user\", // По умолчанию устанавливаем роль как \"user\"\n        });\n\n        setHasAccount(true); // Устанавливаем флаг, что пользователь зарегистрирован\n        navigate(\"/\"); // Перенаправляем пользователя после успешной регистрации\n      })\n      .catch((error) => {\n        // Обработка ошибок регистрации\n        switch (error.code) {\n          case \"auth/email-already-in-use\":\n          case \"auth/invalid-email\":\n            setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n            break;\n          case \"auth/weak-password\":\n            setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n            break;\n          default:\n            break;\n        }\n      });\n  };\n\n  // Функция для входа пользователя\n  const handleLogin = () => {\n    fire\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(async (userCredential) => {\n        const user = userCredential.user;\n\n        // Получаем данные пользователя из Firestore\n        const userDoc = await fire\n          .firestore()\n          .collection(\"users\")\n          .doc(user.uid)\n          .get();\n        const userRole = userDoc.data().role;\n\n        setUserRole(userRole); // Устанавливаем роль пользователя\n\n        // Перенаправляем в зависимости от роли пользователя\n        if (userRole === \"admin\") {\n          navigate(\"/admin\"); // Перенаправляем на админскую страницу\n        } else {\n          navigate(\"/\"); // Перенаправляем на главную страницу для обычных пользователей\n        }\n      })\n      .catch((error) => {\n        // Обработка ошибок входа\n        switch (error.code) {\n          case \"auth/user-disabled\":\n          case \"auth/invalid-email\":\n          case \"auth/user-not-found\":\n            setEmailError(error.message); // Устанавливаем сообщение об ошибке email\n            break;\n          case \"auth/wrong-password\":\n            setPasswordError(error.message); // Устанавливаем сообщение об ошибке пароля\n            break;\n          default:\n            break;\n        }\n      });\n  };\n\n  // Функция для выхода пользователя\n  const handleLogOut = () => {\n    fire.auth().signOut();\n    navigate(\"/\"); // Перенаправляем пользователя после выхода\n  };\n\n  // Функция для отслеживания состояния авторизации пользователя\n  const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if (user) {\n        setUser(user); // Устанавливаем пользователя в состояние, если он авторизован\n\n        // Получаем роль пользователя из Firestore\n        fire\n          .firestore()\n          .collection(\"users\")\n          .doc(user.uid)\n          .get()\n          .then((doc) => {\n            const userRole = doc.data().role;\n            setUserRole(userRole); // Устанавливаем роль\n          });\n      } else {\n        setUser(null); // Сбрасываем состояние пользователя, если он не авторизован\n        setUserRole(\"\"); // Сбрасываем роль\n      }\n      setLoading(false); // Устанавливаем флаг, что загрузка завершена\n    });\n  };\n\n  // Используем хук useEffect для вызова authListener при монтировании компонента\n  useEffect(() => {\n    authListener();\n  }, []);\n\n  // Возвращаем провайдер контекста с передаваемыми значениями и оборачиваем в него дочерние компоненты\n  return (\n    <authContext.Provider\n      value={{\n        email,\n        setEmail,\n        password,\n        setPassword,\n        user,\n        loading,\n        emailError,\n        passwordError,\n        handleRegister,\n        handleLogin,\n        handleLogOut,\n        hasAccount,\n        setHasAccount,\n        userRole, // Роль пользователя\n      }}\n    >\n      {children}\n    </authContext.Provider>\n  );\n};\n\nexport default AuthContextProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}