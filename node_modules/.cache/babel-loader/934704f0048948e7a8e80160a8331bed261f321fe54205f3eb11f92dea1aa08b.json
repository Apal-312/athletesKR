{"ast":null,"code":"import _objectSpread from\"/Users/macbook/Desktop/athletesKR2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer}from\"react\";import axios from\"axios\";import{API_PRODUCTS,API_CATEGORIES}from\"../../helpers/const\";import{useNavigate}from\"react-router-dom\";// Создание контекста для продуктов\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const ProductContext=/*#__PURE__*/createContext();export const useProduct=()=>useContext(ProductContext);// Начальное состояние для редюсера\nconst INIT_STATE={athletes:[],// Состояние для списка спортсменов\noneAthlete:{},// Состояние для данных одного спортсмена\nsports:[],// Состояние для списка видов спорта\ncategories:[]// Добавлено состояние для категорий\n};// Редюсер для управления состоянием\nconst productReducer=function(){let state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:INIT_STATE;let action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"GET_ATHLETES\":// Получение списка спортсменов\nreturn _objectSpread(_objectSpread({},state),{},{athletes:action.payload});case\"GET_ONE_ATHLETE\":// Получение данных одного спортсмена\nreturn _objectSpread(_objectSpread({},state),{},{oneAthlete:action.payload});case\"GET_SPORTS\":// Получение списка видов спорта\nreturn _objectSpread(_objectSpread({},state),{},{sports:action.payload});case\"GET_CATEGORIES\":// Добавлен case для категорий\nreturn _objectSpread(_objectSpread({},state),{},{categories:action.payload});default:return state;// Возвращаем неизмененное состояние, если нет соответствующего типа действия\n}};const ProductContextProvider=_ref=>{let{children}=_ref;const navigate=useNavigate();const[state,dispatch]=useReducer(productReducer,INIT_STATE);// Создание нового спортсмена\nconst createAthlete=async newAthlete=>{await axios.post(API_PRODUCTS,newAthlete);// Отправляем запрос на создание спортсмена\ngetAthletes();// Обновление списка спортсменов после добавления\nnavigate(\"/athletes\");// Перенаправляем на страницу со списком спортсменов\n};// Получение всех спортсменов\nconst getAthletes=function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const searchParams=new URLSearchParams(params);/// Добавляем параметры для запроса\naxios.get(\"\".concat(API_PRODUCTS,\"?\").concat(searchParams))// Запрашиваем список спортсменов с параметрами\n.then(response=>{dispatch({type:\"GET_ATHLETES\",payload:response.data});// Обновляем список спортсменов в состоянии\n}).catch(error=>{console.error(\"Error fetching athletes:\",error);// Логируем ошибку при запросе\n});};// Удаление спортсмена\nconst deleteAthlete=async id=>{await axios.delete(\"\".concat(API_PRODUCTS,\"/\").concat(id));// Отправляем запрос на удаление спортсмена\ngetAthletes();// Обновление списка после удаления\n};// Получение одного спортсмена\nconst getOneAthlete=async id=>{try{const{data}=await axios.get(\"\".concat(API_PRODUCTS,\"/\").concat(id));// Запрашиваем данные одного спортсмена\ndispatch({type:\"GET_ONE_ATHLETE\",payload:data});// Обновляем данные одного спортсмена в состоянии\n}catch(error){console.error(\"Error fetching athlete details:\",error);// Логируем ошибку при запросе данных\n}};// Редактирование данных спортсмена\nconst editAthlete=async(id,editedAthlete)=>{await axios.patch(\"\".concat(API_PRODUCTS,\"/\").concat(id),editedAthlete);// Отправляем запрос на редактирование данных спортсмена\ngetAthletes();// Обновление списка спортсменов после редактирования\nnavigate(\"/athletes\");// Перенаправляем на страницу со списком спортсменов\n};// Создание новой категории (вида спорта)\nconst createSport=async newSport=>{await axios.post(API_CATEGORIES,newSport);// Отправляем запрос на создание новой категории\ngetSports();// Обновление списка видов спорта после добавления\nnavigate(\"/athletes\");// Перенаправляем на страницу спортсменов\n};// Получение всех категорий (видов спорта)\nconst getSports=async()=>{try{const{data}=await axios.get(API_CATEGORIES);// Запрашиваем список видов спорта\ndispatch({type:\"GET_SPORTS\",payload:data});// Обновляем список видов спорта в состоянии\ndispatch({type:\"GET_CATEGORIES\",payload:data});// Использование одной и той же функции для категорий\n}catch(error){console.error(\"Error fetching sports:\",error);// Логируем ошибку при запросе данных видов спорта\n}};// Фильтрация по параметрам\nconst fetchByParams=(query,value)=>{const search=new URLSearchParams(window.location.search);// Получаем параметры из URL\nif(value===\"all\"){// Убираем параметр, если выбран \"все\"\nsearch.delete(query);}else{search.set(query,value);// Добавляем или изменяем параметр\n}const url=\"\".concat(window.location.pathname,\"?\").concat(search);// Формируем новый URL\nnavigate(url);// Перенаправляем на новый URL\ngetAthletes(Object.fromEntries(search.entries()));// Обновляем список с учетом новых параметров\n};// Получение данных одного спортсмена\nconst fetchOneProduct=async id=>{try{const{data}=await axios.get(\"\".concat(API_PRODUCTS,\"/\").concat(id));// Запрашиваем данные одного спортсмена\ndispatch({type:\"GET_ONE_ATHLETE\",payload:data});// Обновляем данные одного спортсмена в состоянии\n}catch(error){console.error(\"Error fetching product details:\",error);// Обновляем данные одного спортсмена в состоянии\n}};// Объект значений, передаваемых через контекст\nconst values={createAthlete,getAthletes,athletes:state.athletes,// Список спортсменов\ndeleteAthlete,getOneAthlete,oneAthlete:state.oneAthlete,// Данные одного спортсмена\neditAthlete,createSport,getSports,sports:state.sports,// Список видов спорта\ncategories:state.categories,// Список категорий (видов спорта)\nfetchByParams,fetchOneProduct};return/*#__PURE__*/_jsx(ProductContext.Provider,{value:values,children:children});};export default ProductContextProvider;","map":{"version":3,"names":["React","createContext","useContext","useReducer","axios","API_PRODUCTS","API_CATEGORIES","useNavigate","jsx","_jsx","ProductContext","useProduct","INIT_STATE","athletes","oneAthlete","sports","categories","productReducer","state","arguments","length","undefined","action","type","_objectSpread","payload","ProductContextProvider","_ref","children","navigate","dispatch","createAthlete","newAthlete","post","getAthletes","params","searchParams","URLSearchParams","get","concat","then","response","data","catch","error","console","deleteAthlete","id","delete","getOneAthlete","editAthlete","editedAthlete","patch","createSport","newSport","getSports","fetchByParams","query","value","search","window","location","set","url","pathname","Object","fromEntries","entries","fetchOneProduct","values","Provider"],"sources":["/Users/macbook/Desktop/athletesKR2/src/components/context/ProductContextProvider.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\nimport axios from \"axios\";\nimport { API_PRODUCTS, API_CATEGORIES } from \"../../helpers/const\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Создание контекста для продуктов\nexport const ProductContext = createContext();\nexport const useProduct = () => useContext(ProductContext);\n\n// Начальное состояние для редюсера\nconst INIT_STATE = {\n  athletes: [], // Состояние для списка спортсменов\n  oneAthlete: {}, // Состояние для данных одного спортсмена\n  sports: [], // Состояние для списка видов спорта\n  categories: [], // Добавлено состояние для категорий\n};\n\n// Редюсер для управления состоянием\nconst productReducer = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case \"GET_ATHLETES\": // Получение списка спортсменов\n      return { ...state, athletes: action.payload };\n    case \"GET_ONE_ATHLETE\": // Получение данных одного спортсмена\n      return { ...state, oneAthlete: action.payload };\n    case \"GET_SPORTS\": // Получение списка видов спорта\n      return { ...state, sports: action.payload };\n    case \"GET_CATEGORIES\": // Добавлен case для категорий\n      return { ...state, categories: action.payload };\n    default:\n      return state; // Возвращаем неизмененное состояние, если нет соответствующего типа действия\n  }\n};\n\nconst ProductContextProvider = ({ children }) => {\n  const navigate = useNavigate();\n  const [state, dispatch] = useReducer(productReducer, INIT_STATE);\n\n  // Создание нового спортсмена\n  const createAthlete = async (newAthlete) => {\n    await axios.post(API_PRODUCTS, newAthlete); // Отправляем запрос на создание спортсмена\n    getAthletes(); // Обновление списка спортсменов после добавления\n    navigate(\"/athletes\"); // Перенаправляем на страницу со списком спортсменов\n  };\n\n  // Получение всех спортсменов\n  const getAthletes = (params = {}) => {\n    const searchParams = new URLSearchParams(params); /// Добавляем параметры для запроса\n    axios\n      .get(`${API_PRODUCTS}?${searchParams}`) // Запрашиваем список спортсменов с параметрами\n      .then((response) => {\n        dispatch({ type: \"GET_ATHLETES\", payload: response.data }); // Обновляем список спортсменов в состоянии\n      })\n      .catch((error) => {\n        console.error(\"Error fetching athletes:\", error); // Логируем ошибку при запросе\n      });\n  };\n\n  // Удаление спортсмена\n  const deleteAthlete = async (id) => {\n    await axios.delete(`${API_PRODUCTS}/${id}`); // Отправляем запрос на удаление спортсмена\n    getAthletes(); // Обновление списка после удаления\n  };\n\n  // Получение одного спортсмена\n  const getOneAthlete = async (id) => {\n    try {\n      const { data } = await axios.get(`${API_PRODUCTS}/${id}`); // Запрашиваем данные одного спортсмена\n      dispatch({ type: \"GET_ONE_ATHLETE\", payload: data }); // Обновляем данные одного спортсмена в состоянии\n    } catch (error) {\n      console.error(\"Error fetching athlete details:\", error); // Логируем ошибку при запросе данных\n    }\n  };\n\n  // Редактирование данных спортсмена\n  const editAthlete = async (id, editedAthlete) => {\n    await axios.patch(`${API_PRODUCTS}/${id}`, editedAthlete); // Отправляем запрос на редактирование данных спортсмена\n    getAthletes(); // Обновление списка спортсменов после редактирования\n    navigate(\"/athletes\"); // Перенаправляем на страницу со списком спортсменов\n  };\n\n  // Создание новой категории (вида спорта)\n  const createSport = async (newSport) => {\n    await axios.post(API_CATEGORIES, newSport); // Отправляем запрос на создание новой категории\n    getSports(); // Обновление списка видов спорта после добавления\n    navigate(\"/athletes\"); // Перенаправляем на страницу спортсменов\n  };\n\n  // Получение всех категорий (видов спорта)\n  const getSports = async () => {\n    try {\n      const { data } = await axios.get(API_CATEGORIES); // Запрашиваем список видов спорта\n      dispatch({ type: \"GET_SPORTS\", payload: data }); // Обновляем список видов спорта в состоянии\n      dispatch({ type: \"GET_CATEGORIES\", payload: data }); // Использование одной и той же функции для категорий\n    } catch (error) {\n      console.error(\"Error fetching sports:\", error); // Логируем ошибку при запросе данных видов спорта\n    }\n  };\n\n  // Фильтрация по параметрам\n  const fetchByParams = (query, value) => {\n    const search = new URLSearchParams(window.location.search); // Получаем параметры из URL\n    if (value === \"all\") {\n      // Убираем параметр, если выбран \"все\"\n      search.delete(query);\n    } else {\n      search.set(query, value); // Добавляем или изменяем параметр\n    }\n    const url = `${window.location.pathname}?${search}`; // Формируем новый URL\n    navigate(url); // Перенаправляем на новый URL\n    getAthletes(Object.fromEntries(search.entries())); // Обновляем список с учетом новых параметров\n  };\n\n  // Получение данных одного спортсмена\n  const fetchOneProduct = async (id) => {\n    try {\n      const { data } = await axios.get(`${API_PRODUCTS}/${id}`); // Запрашиваем данные одного спортсмена\n      dispatch({ type: \"GET_ONE_ATHLETE\", payload: data }); // Обновляем данные одного спортсмена в состоянии\n    } catch (error) {\n      console.error(\"Error fetching product details:\", error); // Обновляем данные одного спортсмена в состоянии\n    }\n  };\n\n  // Объект значений, передаваемых через контекст\n  const values = {\n    createAthlete,\n    getAthletes,\n    athletes: state.athletes, // Список спортсменов\n    deleteAthlete,\n    getOneAthlete,\n    oneAthlete: state.oneAthlete, // Данные одного спортсмена\n    editAthlete,\n    createSport,\n    getSports,\n    sports: state.sports, // Список видов спорта\n    categories: state.categories, // Список категорий (видов спорта)\n    fetchByParams,\n    fetchOneProduct,\n  };\n\n  return (\n    <ProductContext.Provider value={values}>{children}</ProductContext.Provider>\n  );\n};\n\nexport default ProductContextProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}