{"ast":null,"code":"import _objectSpread from\"/Users/macbook/Desktop/athletesKR2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useEffect,useReducer}from\"react\";// Создаем контекст для избранных атлетов\nimport{jsx as _jsx}from\"react/jsx-runtime\";const FavoriteContext=/*#__PURE__*/createContext();// Хук для использования контекста избранных атлетов\nexport const useFavorite=()=>useContext(FavoriteContext);// Начальное состояние для редьюсера избранных атлетов\nconst INIT_STATE={favoriteAthletes:[]// Пустой массив избранных атлетов\n};// Редьюсер для управления состоянием избранных атлетов\nconst favoriteReducer=(state,action)=>{switch(action.type){case\"ADD_TO_FAVORITE\":// Добавление атлета в избранные\nreturn _objectSpread(_objectSpread({},state),{},{favoriteAthletes:[...state.favoriteAthletes,action.payload]});case\"REMOVE_FROM_FAVORITE\":// Удаление атлета из избранных\nreturn _objectSpread(_objectSpread({},state),{},{favoriteAthletes:state.favoriteAthletes.filter(athlete=>athlete.id!==action.payload)});case\"SET_FAVORITES\":// Установка всех избранных атлетов\nreturn _objectSpread(_objectSpread({},state),{},{favoriteAthletes:action.payload});default:return state;}};// Провайдер контекста для избранных атлетов\nconst FavoriteContextProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(favoriteReducer,INIT_STATE);// Загрузка избранных атлетов из локального хранилища при инициализации\nuseEffect(()=>{const favoritesFromStorage=JSON.parse(localStorage.getItem(\"favoriteAthletes\"));if(favoritesFromStorage){dispatch({type:\"SET_FAVORITES\",payload:favoritesFromStorage});}},[]);// Сохранение избранных атлетов в локальное хранилище при обновлении состояния\nuseEffect(()=>{localStorage.setItem(\"favoriteAthletes\",JSON.stringify(state.favoriteAthletes));},[state.favoriteAthletes]);// Функция для добавления атлета в избранные\nconst addAthleteToFavorite=athlete=>{dispatch({type:\"ADD_TO_FAVORITE\",payload:athlete});};// Функция для удаления атлета из избранных\nconst removeAthleteFromFavorite=id=>{dispatch({type:\"REMOVE_FROM_FAVORITE\",payload:id});};// Функция для проверки, есть ли атлет в избранных\nconst isAthleteInFavorite=id=>{return state.favoriteAthletes.some(athlete=>athlete.id===id);};// Значения контекста, доступные для компонентов\nconst values={addAthleteToFavorite,removeAthleteFromFavorite,isAthleteInFavorite,favoriteAthletes:state.favoriteAthletes};// Возвращаем провайдер контекста с доступными значениями\nreturn/*#__PURE__*/_jsx(FavoriteContext.Provider,{value:values,children:children});};export default FavoriteContextProvider;","map":{"version":3,"names":["React","createContext","useContext","useEffect","useReducer","jsx","_jsx","FavoriteContext","useFavorite","INIT_STATE","favoriteAthletes","favoriteReducer","state","action","type","_objectSpread","payload","filter","athlete","id","FavoriteContextProvider","_ref","children","dispatch","favoritesFromStorage","JSON","parse","localStorage","getItem","setItem","stringify","addAthleteToFavorite","removeAthleteFromFavorite","isAthleteInFavorite","some","values","Provider","value"],"sources":["/Users/macbook/Desktop/athletesKR2/src/components/context/FavoriteContextProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useReducer } from \"react\";\n\n// Создаем контекст для избранных атлетов\nconst FavoriteContext = createContext();\n\n// Хук для использования контекста избранных атлетов\nexport const useFavorite = () => useContext(FavoriteContext);\n\n// Начальное состояние для редьюсера избранных атлетов\nconst INIT_STATE = {\n  favoriteAthletes: [], // Пустой массив избранных атлетов\n};\n\n// Редьюсер для управления состоянием избранных атлетов\nconst favoriteReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TO_FAVORITE\":\n      // Добавление атлета в избранные\n      return {\n        ...state,\n        favoriteAthletes: [...state.favoriteAthletes, action.payload],\n      };\n    case \"REMOVE_FROM_FAVORITE\":\n      // Удаление атлета из избранных\n      return {\n        ...state,\n        favoriteAthletes: state.favoriteAthletes.filter(\n          (athlete) => athlete.id !== action.payload\n        ),\n      };\n    case \"SET_FAVORITES\":\n      // Установка всех избранных атлетов\n      return {\n        ...state,\n        favoriteAthletes: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n// Провайдер контекста для избранных атлетов\nconst FavoriteContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(favoriteReducer, INIT_STATE);\n\n  // Загрузка избранных атлетов из локального хранилища при инициализации\n  useEffect(() => {\n    const favoritesFromStorage = JSON.parse(\n      localStorage.getItem(\"favoriteAthletes\")\n    );\n    if (favoritesFromStorage) {\n      dispatch({ type: \"SET_FAVORITES\", payload: favoritesFromStorage });\n    }\n  }, []);\n\n  // Сохранение избранных атлетов в локальное хранилище при обновлении состояния\n  useEffect(() => {\n    localStorage.setItem(\n      \"favoriteAthletes\",\n      JSON.stringify(state.favoriteAthletes)\n    );\n  }, [state.favoriteAthletes]);\n\n  // Функция для добавления атлета в избранные\n  const addAthleteToFavorite = (athlete) => {\n    dispatch({ type: \"ADD_TO_FAVORITE\", payload: athlete });\n  };\n\n  // Функция для удаления атлета из избранных\n  const removeAthleteFromFavorite = (id) => {\n    dispatch({ type: \"REMOVE_FROM_FAVORITE\", payload: id });\n  };\n\n  // Функция для проверки, есть ли атлет в избранных\n  const isAthleteInFavorite = (id) => {\n    return state.favoriteAthletes.some((athlete) => athlete.id === id);\n  };\n\n  // Значения контекста, доступные для компонентов\n  const values = {\n    addAthleteToFavorite,\n    removeAthleteFromFavorite,\n    isAthleteInFavorite,\n    favoriteAthletes: state.favoriteAthletes,\n  };\n\n  // Возвращаем провайдер контекста с доступными значениями\n  return (\n    <FavoriteContext.Provider value={values}>\n      {children}\n    </FavoriteContext.Provider>\n  );\n};\n\nexport default FavoriteContextProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}