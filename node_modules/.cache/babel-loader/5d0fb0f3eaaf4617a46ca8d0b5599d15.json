{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/athletesKR/src/components/products/EditAthletes.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Box, Button, TextField, Typography, CircularProgress } from \"@mui/material\";\nimport { useProduct } from \"../context/ProductContextProvider\";\nconst EditAthletes = () => {\n  const {\n    id\n  } = useParams(); // Получаем параметр id из URL с помощью хука useParams\n  const {\n    fetchOneProduct,\n    editAthlete,\n    oneAthlete\n  } = useProduct(); // Получаем необходимые функции и состояния из контекста\n\n  // Состояние для хранения данных спортсмена, которые будут изменяться\n  const [product, setProduct] = useState({\n    name: \"\",\n    sport: \"\",\n    country: \"\",\n    image: \"\",\n    rating: 0\n  });\n  const [loading, setLoading] = useState(true); // Состояние для отслеживания загрузки данных\n\n  // Эффект для загрузки данных спортсмена по id при загрузке компонента\n  useEffect(() => {\n    fetchOneProduct(id).finally(() => setLoading(false)); // Добавляем setLoading, чтобы прекратить загрузку после получения данных\n  }, [id]);\n\n  // Эффект для обновления состояния product при получении данных о спортсмене\n  useEffect(() => {\n    if (oneAthlete) {\n      setProduct(oneAthlete);\n    }\n  }, [oneAthlete]);\n\n  // Обработчик изменения данных в полях ввода\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setProduct({\n      ...product,\n      [name]: value\n    });\n  };\n\n  // Обработчик для обновления данных спортсмена\n  const handleUpdateProduct = () => {\n    editAthlete(id, product);\n  };\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Box, {\n      sx: {\n        textAlign: \"center\",\n        marginTop: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    })); // Показываем индикатор загрузки, пока данные не загружены\n  }\n  return /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      width: \"50%\",\n      margin: \"20px auto\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      gap: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h4\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Edit Athlete\"), /*#__PURE__*/React.createElement(TextField, {\n    name: \"name\",\n    label: \"Name\",\n    variant: \"outlined\",\n    value: product.name || \"\" // Используем пустую строку, если значение undefined\n    ,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    name: \"sport\",\n    label: \"Sport\",\n    variant: \"outlined\",\n    value: product.sport || \"\" // Используем пустую строку, если значение undefined\n    ,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    name: \"country\",\n    label: \"Country\",\n    variant: \"outlined\",\n    value: product.country || \"\" // Используем пустую строку, если значение undefined\n    ,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    name: \"image\",\n    label: \"Image URL\",\n    variant: \"outlined\",\n    value: product.image || \"\" // Используем пустую строку, если значение undefined\n    ,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: handleUpdateProduct,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Edit Athlete\"));\n};\nexport default EditAthletes;","map":{"version":3,"names":["React","useEffect","useState","useParams","Box","Button","TextField","Typography","CircularProgress","useProduct","EditAthletes","id","fetchOneProduct","editAthlete","oneAthlete","product","setProduct","name","sport","country","image","rating","loading","setLoading","finally","handleInputChange","e","value","target","handleUpdateProduct","createElement","sx","textAlign","marginTop","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","width","margin","display","flexDirection","gap","variant","align","label","onChange","onClick"],"sources":["/Users/macbook/Desktop/athletesKR/src/components/products/EditAthletes.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  TextField,\n  Typography,\n  CircularProgress,\n} from \"@mui/material\";\nimport { useProduct } from \"../context/ProductContextProvider\";\n\nconst EditAthletes = () => {\n  const { id } = useParams(); // Получаем параметр id из URL с помощью хука useParams\n  const { fetchOneProduct, editAthlete, oneAthlete } = useProduct(); // Получаем необходимые функции и состояния из контекста\n\n  // Состояние для хранения данных спортсмена, которые будут изменяться\n  const [product, setProduct] = useState({\n    name: \"\",\n    sport: \"\",\n    country: \"\",\n    image: \"\",\n    rating: 0,\n  });\n\n  const [loading, setLoading] = useState(true); // Состояние для отслеживания загрузки данных\n\n  // Эффект для загрузки данных спортсмена по id при загрузке компонента\n  useEffect(() => {\n    fetchOneProduct(id).finally(() => setLoading(false)); // Добавляем setLoading, чтобы прекратить загрузку после получения данных\n  }, [id]);\n\n  // Эффект для обновления состояния product при получении данных о спортсмене\n  useEffect(() => {\n    if (oneAthlete) {\n      setProduct(oneAthlete);\n    }\n  }, [oneAthlete]);\n\n  // Обработчик изменения данных в полях ввода\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setProduct({\n      ...product,\n      [name]: value,\n    });\n  };\n\n  // Обработчик для обновления данных спортсмена\n  const handleUpdateProduct = () => {\n    editAthlete(id, product);\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ textAlign: \"center\", marginTop: \"20px\" }}>\n        <CircularProgress />\n      </Box>\n    ); // Показываем индикатор загрузки, пока данные не загружены\n  }\n\n  return (\n    <Box\n      sx={{\n        width: \"50%\",\n        margin: \"20px auto\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 2,\n      }}\n    >\n      <Typography variant=\"h4\" align=\"center\">\n        Edit Athlete\n      </Typography>\n      <TextField\n        name=\"name\"\n        label=\"Name\"\n        variant=\"outlined\"\n        value={product.name || \"\"} // Используем пустую строку, если значение undefined\n        onChange={handleInputChange}\n      />\n      <TextField\n        name=\"sport\"\n        label=\"Sport\"\n        variant=\"outlined\"\n        value={product.sport || \"\"} // Используем пустую строку, если значение undefined\n        onChange={handleInputChange}\n      />\n      <TextField\n        name=\"country\"\n        label=\"Country\"\n        variant=\"outlined\"\n        value={product.country || \"\"} // Используем пустую строку, если значение undefined\n        onChange={handleInputChange}\n      />\n      <TextField\n        name=\"image\"\n        label=\"Image URL\"\n        variant=\"outlined\"\n        value={product.image || \"\"} // Используем пустую строку, если значение undefined\n        onChange={handleInputChange}\n      />\n\n      <Button variant=\"contained\" onClick={handleUpdateProduct}>\n        Edit Athlete\n      </Button>\n    </Box>\n  );\n};\n\nexport default EditAthletes;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}