{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{Box,Paper,IconButton,Menu,MenuItem,FormControl,InputLabel,Select,TextField}from\"@mui/material\";import SearchIcon from\"@mui/icons-material/Search\";import{useSearchParams}from\"react-router-dom\";import{useProduct}from\"../context/ProductContextProvider\";// Импортируем контекст для работы с продуктами\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SideBar=()=>{// Состояние для управления открытием/закрытием меню\nconst[anchorEl,setAnchorEl]=useState(null);// Использование контекста для получения списка видов спорта и функций для работы с ними\nconst{sports,getSports,fetchByParams}=useProduct();// Хук для работы с параметрами поиска в URL\nconst[searchParams,setSearchParams]=useSearchParams();// Состояние для хранения текущего значения поиска\nconst[search,setSearch]=useState(searchParams.get(\"q\")||\"\");// Состояние для хранения выбранного вида спорта\nconst[selectedSport,setSelectedSport]=useState(\"\");// Загрузка списка видов спорта при монтировании компонента\nuseEffect(()=>{getSports();// Вызываем функцию для получения списка видов спорта\n},[getSports]);// Установка выбранного вида спорта из параметров URL при изменении searchParams\nuseEffect(()=>{setSelectedSport(searchParams.get(\"sport\")||\"\");// Устанавливаем значение выбранного вида спорта из параметров\n},[searchParams]);// Обработчик открытия меню\nconst handleOpenNavMenu=event=>{setAnchorEl(event.currentTarget);// Открываем меню, устанавливая anchorEl\n};// Обработчик закрытия меню\nconst handleCloseNavMenu=()=>{setAnchorEl(null);// Закрываем меню\n};// Обработчик изменения текста поиска\nconst handleSearchChange=event=>{const searchText=event.target.value;// Получаем значение текста поиска\nsetSearch(searchText);// Обновляем состояние для текста поиска\n// Обновление параметров поиска в URL\nconst params=new URLSearchParams();if(searchText)params.set(\"q\",searchText);// Добавляем параметр q (поиск) в URL\nif(selectedSport)params.set(\"sport\",selectedSport);// Добавляем параметр sport (вид спорта) в URL\nsetSearchParams(params);// Обновляем параметры URL\n// Выполнение поиска с новыми параметрами\nfetchByParams(params);};// Обработчик изменения выбранного вида спорта\nconst handleSportChange=event=>{const sport=event.target.value;// Получаем выбранный вид спорта\nsetSelectedSport(sport);// Обновляем состояние для выбранного вида спорта\n// Обновление параметров поиска в URL\nconst params=new URLSearchParams();if(search)params.set(\"q\",search);// Добавляем параметр q в URL\nif(sport)params.set(\"sport\",sport);// Добавляем параметр sport в URL\nsetSearchParams(params);// Обновляем параметры URL\n// Выполнение поиска с новыми параметрами\nfetchByParams(params);};return/*#__PURE__*/_jsxs(Box,{sx:{flexGrow:1,width:\"auto\",height:\"50px\"},children:[/*#__PURE__*/_jsxs(IconButton,{size:\"large\",edge:\"start\",color:\"inherit\",\"aria-label\":\"menu\",onClick:handleOpenNavMenu// Открытие меню при клике\n,sx:{color:\"white\"},children:[/*#__PURE__*/_jsx(SearchIcon,{}),\" \"]}),/*#__PURE__*/_jsxs(Menu,{anchorEl:anchorEl// Привязываем меню к элементу\n,open:Boolean(anchorEl)// Открываем меню, если anchorEl существует\n,onClose:handleCloseNavMenu// Закрытие меню при клике за пределы\n,sx:{\"& .MuiMenu-paper\":{backgroundColor:\"transparent\"// Устанавливаем прозрачный фон для меню\n}},children:[/*#__PURE__*/_jsx(MenuItem,{children:/*#__PURE__*/_jsx(Paper,{component:\"form\",sx:{p:\"2px 4px\",display:\"flex\",alignItems:\"center\",width:270,backgroundColor:\"#001d3d\"// Устанавливаем темный фон для инпута\n},children:/*#__PURE__*/_jsx(TextField,{sx:{ml:-0.75,flex:1,color:\"white\",// Белый цвет текста\nbackgroundColor:\"transparent\",\"& .MuiInputBase-input\":{color:\"white\",// Белый цвет текста в инпуте\npaddingLeft:\"15px\"},\"& .MuiOutlinedInput-notchedOutline\":{borderColor:\"white\"// Белая рамка по умолчанию\n},\"& .MuiInputBase-root\":{border:\"1px solid white\",// Белая рамка\nborderRadius:\"4px\"// Скругленные углы\n},\"& .MuiInputBase-root:hover\":{borderColor:\"#59a5d8\",// Цвет рамки при наведении\nbgcolor:\"#001d3d\"// Фон при наведении\n}},placeholder:\"\\u041F\\u043E\\u0438\\u0441\\u043A \\u0441\\u043F\\u043E\\u0440\\u0442\\u0441\\u043C\\u0435\\u043D\\u043E\\u0432...\",value:search// Текущее значение поиска\n,onChange:handleSearchChange// Обработчик изменения текста\n,variant:\"standard\",fullWidth:true,InputProps:{endAdornment:/*#__PURE__*/_jsx(IconButton,{sx:{p:\"10px\",color:\"#90e0ef\"}// Цвет кнопки для поиска\n,\"aria-label\":\"search\",onClick:handleCloseNavMenu// Закрытие меню при клике на кнопку поиска\n,children:/*#__PURE__*/_jsx(SearchIcon,{})})}})})}),/*#__PURE__*/_jsx(MenuItem,{children:/*#__PURE__*/_jsxs(FormControl,{sx:{bgcolor:\"#001d3d\"},variant:\"outlined\",fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{sx:{color:\"white\"},children:\"\\u0412\\u0438\\u0434 \\u0441\\u043F\\u043E\\u0440\\u0442\\u0430\"}),/*#__PURE__*/_jsxs(Select,{value:selectedSport// Текущее выбранное значение вида спорта\n,onChange:handleSportChange// Обработчик изменения вида спорта\n,label:\"\\u0412\\u0438\\u0434 \\u0441\\u043F\\u043E\\u0440\\u0442\\u0430\",sx:{\"& .MuiInputBase-root\":{color:\"white\"// Белый цвет текста для инпута\n},\"& .MuiOutlinedInput-notchedOutline\":{borderColor:selectedSport?\"#001d3d\":\"white\"// Цвет рамки\n},\"& .MuiSelect-icon\":{color:\"white\"// Белый цвет стрелки\n},\"& .MuiSelect-select\":{color:\"white\"// Белый текст в выпадающем списке\n}},children:[/*#__PURE__*/_jsx(MenuItem,{sx:{backgroundColor:\"#0077b6 !important\",// Цвет фона для элемента по умолчанию\ncolor:\"white !important\"// Белый цвет текста\n},value:\"\",children:\"\\u0412\\u0441\\u0435 \\u0432\\u0438\\u0434\\u044B \\u0441\\u043F\\u043E\\u0440\\u0442\\u0430\"}),sports.map(sport=>/*#__PURE__*/_jsx(MenuItem,{value:sport.name,sx:{bgcolor:\"#001d3d\",// Синий фон для элементов\ncolor:sport.name===selectedSport?\"black\":\"white\",// Черный цвет для выбранного элемента\n\"&:hover\":{bgcolor:\"#59a5d8\",// Цвет фона при наведении\ncolor:\"black\"// Черный текст при наведении\n}},children:sport.name},sport.id))]})]})})]})]});};export default SideBar;","map":{"version":3,"names":["React","useEffect","useState","Box","Paper","IconButton","Menu","MenuItem","FormControl","InputLabel","Select","TextField","SearchIcon","useSearchParams","useProduct","jsx","_jsx","jsxs","_jsxs","SideBar","anchorEl","setAnchorEl","sports","getSports","fetchByParams","searchParams","setSearchParams","search","setSearch","get","selectedSport","setSelectedSport","handleOpenNavMenu","event","currentTarget","handleCloseNavMenu","handleSearchChange","searchText","target","value","params","URLSearchParams","set","handleSportChange","sport","sx","flexGrow","width","height","children","size","edge","color","onClick","open","Boolean","onClose","backgroundColor","component","p","display","alignItems","ml","flex","paddingLeft","borderColor","border","borderRadius","bgcolor","placeholder","onChange","variant","fullWidth","InputProps","endAdornment","label","map","name","id"],"sources":["/Users/macbook/Desktop/athletesKR2/src/components/products/SideBar.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Paper,\n  IconButton,\n  Menu,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  TextField,\n} from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useProduct } from \"../context/ProductContextProvider\"; // Импортируем контекст для работы с продуктами\n\nconst SideBar = () => {\n  // Состояние для управления открытием/закрытием меню\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  // Использование контекста для получения списка видов спорта и функций для работы с ними\n  const { sports, getSports, fetchByParams } = useProduct();\n\n  // Хук для работы с параметрами поиска в URL\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  // Состояние для хранения текущего значения поиска\n  const [search, setSearch] = useState(searchParams.get(\"q\") || \"\");\n\n  // Состояние для хранения выбранного вида спорта\n  const [selectedSport, setSelectedSport] = useState(\"\");\n\n  // Загрузка списка видов спорта при монтировании компонента\n  useEffect(() => {\n    getSports(); // Вызываем функцию для получения списка видов спорта\n  }, [getSports]);\n\n  // Установка выбранного вида спорта из параметров URL при изменении searchParams\n  useEffect(() => {\n    setSelectedSport(searchParams.get(\"sport\") || \"\"); // Устанавливаем значение выбранного вида спорта из параметров\n  }, [searchParams]);\n\n  // Обработчик открытия меню\n  const handleOpenNavMenu = (event) => {\n    setAnchorEl(event.currentTarget); // Открываем меню, устанавливая anchorEl\n  };\n\n  // Обработчик закрытия меню\n  const handleCloseNavMenu = () => {\n    setAnchorEl(null); // Закрываем меню\n  };\n\n  // Обработчик изменения текста поиска\n  const handleSearchChange = (event) => {\n    const searchText = event.target.value; // Получаем значение текста поиска\n    setSearch(searchText); // Обновляем состояние для текста поиска\n\n    // Обновление параметров поиска в URL\n    const params = new URLSearchParams();\n    if (searchText) params.set(\"q\", searchText); // Добавляем параметр q (поиск) в URL\n    if (selectedSport) params.set(\"sport\", selectedSport); // Добавляем параметр sport (вид спорта) в URL\n    setSearchParams(params); // Обновляем параметры URL\n\n    // Выполнение поиска с новыми параметрами\n    fetchByParams(params);\n  };\n\n  // Обработчик изменения выбранного вида спорта\n  const handleSportChange = (event) => {\n    const sport = event.target.value; // Получаем выбранный вид спорта\n    setSelectedSport(sport); // Обновляем состояние для выбранного вида спорта\n\n    // Обновление параметров поиска в URL\n    const params = new URLSearchParams();\n    if (search) params.set(\"q\", search); // Добавляем параметр q в URL\n    if (sport) params.set(\"sport\", sport); // Добавляем параметр sport в URL\n    setSearchParams(params); // Обновляем параметры URL\n\n    // Выполнение поиска с новыми параметрами\n    fetchByParams(params);\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1, width: \"auto\", height: \"50px\" }}>\n      <IconButton\n        size=\"large\"\n        edge=\"start\"\n        color=\"inherit\"\n        aria-label=\"menu\"\n        onClick={handleOpenNavMenu} // Открытие меню при клике\n        sx={{ color: \"white\" }}\n      >\n        <SearchIcon /> {/* Иконка для поиска */}\n      </IconButton>\n\n      {/* Меню для поиска и фильтрации */}\n      <Menu\n        anchorEl={anchorEl} // Привязываем меню к элементу\n        open={Boolean(anchorEl)} // Открываем меню, если anchorEl существует\n        onClose={handleCloseNavMenu} // Закрытие меню при клике за пределы\n        sx={{\n          \"& .MuiMenu-paper\": {\n            backgroundColor: \"transparent\", // Устанавливаем прозрачный фон для меню\n          },\n        }}\n      >\n        {/* Поле поиска */}\n        <MenuItem>\n          <Paper\n            component=\"form\"\n            sx={{\n              p: \"2px 4px\",\n              display: \"flex\",\n              alignItems: \"center\",\n              width: 270,\n              backgroundColor: \"#001d3d\", // Устанавливаем темный фон для инпута\n            }}\n          >\n            <TextField\n              sx={{\n                ml: -0.75,\n                flex: 1,\n                color: \"white\", // Белый цвет текста\n                backgroundColor: \"transparent\",\n                \"& .MuiInputBase-input\": {\n                  color: \"white\", // Белый цвет текста в инпуте\n                  paddingLeft: \"15px\",\n                },\n                \"& .MuiOutlinedInput-notchedOutline\": {\n                  borderColor: \"white\", // Белая рамка по умолчанию\n                },\n                \"& .MuiInputBase-root\": {\n                  border: \"1px solid white\", // Белая рамка\n                  borderRadius: \"4px\", // Скругленные углы\n                },\n                \"& .MuiInputBase-root:hover\": {\n                  borderColor: \"#59a5d8\", // Цвет рамки при наведении\n                  bgcolor: \"#001d3d\", // Фон при наведении\n                },\n              }}\n              placeholder=\"Поиск спортсменов...\"\n              value={search} // Текущее значение поиска\n              onChange={handleSearchChange} // Обработчик изменения текста\n              variant=\"standard\"\n              fullWidth\n              InputProps={{\n                endAdornment: (\n                  <IconButton\n                    sx={{ p: \"10px\", color: \"#90e0ef\" }} // Цвет кнопки для поиска\n                    aria-label=\"search\"\n                    onClick={handleCloseNavMenu} // Закрытие меню при клике на кнопку поиска\n                  >\n                    <SearchIcon />\n                  </IconButton>\n                ),\n              }}\n            />\n          </Paper>\n        </MenuItem>\n\n        {/* Фильтр по виду спорта */}\n        <MenuItem>\n          <FormControl sx={{ bgcolor: \"#001d3d\" }} variant=\"outlined\" fullWidth>\n            <InputLabel sx={{ color: \"white\" }}>Вид спорта</InputLabel>\n            <Select\n              value={selectedSport} // Текущее выбранное значение вида спорта\n              onChange={handleSportChange} // Обработчик изменения вида спорта\n              label=\"Вид спорта\"\n              sx={{\n                \"& .MuiInputBase-root\": {\n                  color: \"white\", // Белый цвет текста для инпута\n                },\n                \"& .MuiOutlinedInput-notchedOutline\": {\n                  borderColor: selectedSport ? \"#001d3d\" : \"white\", // Цвет рамки\n                },\n                \"& .MuiSelect-icon\": {\n                  color: \"white\", // Белый цвет стрелки\n                },\n                \"& .MuiSelect-select\": {\n                  color: \"white\", // Белый текст в выпадающем списке\n                },\n              }}\n            >\n              <MenuItem\n                sx={{\n                  backgroundColor: \"#0077b6 !important\", // Цвет фона для элемента по умолчанию\n                  color: \"white !important\", // Белый цвет текста\n                }}\n                value=\"\"\n              >\n                Все виды спорта\n              </MenuItem>\n              {/* Перебор видов спорта и отображение каждого элемента */}\n              {sports.map((sport) => (\n                <MenuItem\n                  key={sport.id}\n                  value={sport.name}\n                  sx={{\n                    bgcolor: \"#001d3d\", // Синий фон для элементов\n                    color: sport.name === selectedSport ? \"black\" : \"white\", // Черный цвет для выбранного элемента\n                    \"&:hover\": {\n                      bgcolor: \"#59a5d8\", // Цвет фона при наведении\n                      color: \"black\", // Черный текст при наведении\n                    },\n                  }}\n                >\n                  {sport.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </MenuItem>\n      </Menu>\n    </Box>\n  );\n};\n\nexport default SideBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}